name: mongo-sharding

services:
  # Config Server для хранения метаданных шардирования
  config1:
    container_name: config1
    image: dh-mirror.gitverse.ru/mongo:latest
    command: mongod --configsvr --replSet configReplSet --port 27017 --dbpath /data/db
    volumes:
      - config1_data:/data/db
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Первый шард (Shard 1)
  shard1:
    container_name: shard1
    image: dh-mirror.gitverse.ru/mongo:latest
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018 --dbpath /data/db
    volumes:
      - shard1_data:/data/db
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Второй шард (Shard 2)
  shard2:
    container_name: shard2
    image: dh-mirror.gitverse.ru/mongo:latest
    command: mongod --shardsvr --replSet shard2ReplSet --port 27019 --dbpath /data/db
    volumes:
      - shard2_data:/data/db
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Mongos Router для маршрутизации запросов
  mongos:
    container_name: mongos
    image: dh-mirror.gitverse.ru/mongo:latest
    command: mongos --configdb configReplSet/config1:27017 --port 27017
    depends_on:
      config1:
        condition: service_healthy
      shard1:
        condition: service_healthy
      shard2:
        condition: service_healthy
    ports:
      - "27017:27017"
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API приложение
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    depends_on:
      mongos:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      MONGODB_URL: "mongodb://mongos:27017"
      MONGODB_DATABASE_NAME: "somedb"
    networks:
      - mongo-network

volumes:
  config1_data:
  shard1_data:
  shard2_data:

networks:
  mongo-network:
    driver: bridge
