#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MongoDB —Å —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π
# –î–ª—è –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–∞ "–ú–æ–±–∏–ª—å–Ω—ã–π –º–∏—Ä"

set -e

echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB —Å —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MongoDB
wait_for_mongo() {
    local host=$1
    local port=$2
    local max_attempts=30
    local attempt=1
    
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MongoDB –Ω–∞ $host:$port..."
    
    while [ $attempt -le $max_attempts ]; do
        if docker compose exec -T $host mongosh --port $port --quiet --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
            echo "‚úÖ MongoDB –Ω–∞ $host:$port –≥–æ—Ç–æ–≤"
            return 0
        fi
        
        echo "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå MongoDB –Ω–∞ $host:$port –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üìã –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

wait_for_mongo "config1" "27019"
wait_for_mongo "config2" "27019"
wait_for_mongo "config3" "27019"

wait_for_mongo "shard1_replica1" "27018"
wait_for_mongo "shard1_replica2" "27018"
wait_for_mongo "shard1_replica3" "27018"

wait_for_mongo "shard2_replica1" "27020"
wait_for_mongo "shard2_replica2" "27020"
wait_for_mongo "shard2_replica3" "27020"

echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Config Server —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
echo "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Config Server —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏..."
docker compose exec -T config1 mongosh --port 27019 --quiet <<EOF
rs.initiate({
  _id: "configReplSet",
  configsvr: true,
  members: [
    { _id: 0, host: "config1:27019" },
    { _id: 1, host: "config2:27019" },
    { _id: 2, host: "config3:27019" }
  ]
})
EOF

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Config Server —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Config Server —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Config Server —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏..."
docker compose exec -T config1 mongosh --port 27019 --quiet <<EOF
rs.status()
EOF

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ mongos
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ mongos..."
sleep 10
wait_for_mongo "mongos" "27017"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è Shard 1
echo "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è Shard 1..."
docker compose exec -T shard1_replica1 mongosh --port 27018 --quiet <<EOF
rs.initiate({
  _id: "shard1ReplSet",
  members: [
    { _id: 0, host: "shard1_replica1:27018", priority: 2 },
    { _id: 1, host: "shard1_replica2:27018", priority: 1 },
    { _id: 2, host: "shard1_replica3:27018", priority: 1 }
  ]
})
EOF

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è Shard 2
echo "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è Shard 2..."
docker compose exec -T shard2_replica1 mongosh --port 27020 --quiet <<EOF
rs.initiate({
  _id: "shard2ReplSet",
  members: [
    { _id: 0, host: "shard2_replica1:27020", priority: 2 },
    { _id: 1, host: "shard2_replica2:27020", priority: 1 },
    { _id: 2, host: "shard2_replica3:27020", priority: 1 }
  ]
})
EOF

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ Shard 1..."
docker compose exec -T shard1_replica1 mongosh --port 27018 --quiet <<EOF
rs.status()
EOF

echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ Shard 2..."
docker compose exec -T shard2_replica1 mongosh --port 27020 --quiet <<EOF
rs.status()
EOF

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞—Ä–¥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä
echo "üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞—Ä–¥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä..."

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Shard 1
echo "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Shard 1..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
sh.addShard("shard1ReplSet/shard1_replica1:27018,shard1_replica2:27018,shard1_replica3:27018")
EOF

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Shard 2
echo "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Shard 2..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
sh.addShard("shard2ReplSet/shard2_replica1:27020,shard2_replica2:27020,shard2_replica3:27020")
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
echo "üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
use somedb
db.createCollection("helloDoc")
EOF

# –í–∫–ª—é—á–µ–Ω–∏–µ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚öôÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
sh.enableSharding("somedb")
sh.shardCollection("somedb.helloDoc", { "name": "hashed" })
EOF

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
echo "üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
use somedb
db.helloDoc.insertMany([
  { name: "iPhone 15", price: 999, category: "smartphone", stock: 50 },
  { name: "Samsung Galaxy S24", price: 899, category: "smartphone", stock: 45 },
  { name: "Google Pixel 8", price: 699, category: "smartphone", stock: 30 },
  { name: "iPad Pro", price: 1099, category: "tablet", stock: 25 },
  { name: "MacBook Air", price: 1199, category: "laptop", stock: 20 },
  { name: "AirPods Pro", price: 249, category: "accessories", stock: 100 },
  { name: "Apple Watch", price: 399, category: "wearable", stock: 60 },
  { name: "Sony WH-1000XM5", price: 349, category: "headphones", stock: 40 },
  { name: "Nintendo Switch", price: 299, category: "gaming", stock: 35 },
  { name: "DJI Mini 3", price: 459, category: "drone", stock: 15 }
])
EOF

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞—Ä–¥–∞–º..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
use somedb
db.helloDoc.getShardDistribution()
EOF

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è
echo "üìã –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è..."
docker compose exec -T mongos mongosh --port 27017 --quiet <<EOF
sh.status()
EOF

echo "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "üìã –ß—Ç–æ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:"
echo "   ‚úÖ Config Server —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è (3 —Ä–µ–ø–ª–∏–∫–∏)"
echo "   ‚úÖ –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –¥–ª—è Shard 1 (3 —Ä–µ–ø–ª–∏–∫–∏)"
echo "   ‚úÖ –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –¥–ª—è Shard 2 (3 —Ä–µ–ø–ª–∏–∫–∏)"
echo "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞—Ä–¥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä"
echo "   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'somedb'"
echo "   ‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø–æ–ª—é 'name'"
echo "   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
echo ""
echo "üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080"
echo "üìö Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8080/docs"
echo ""
echo "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./scripts/check-status.sh"
echo "‚ö° –î–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./scripts/load-test.sh"
